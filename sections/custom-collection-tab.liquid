{% comment %} {{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'tab-featured-collections.css' | asset_url | stylesheet_tag }}

{{ 'component-slideshow.css' | asset_url | stylesheet_tag }}

{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'template-collection.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.50 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.50 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}
 

{%- liquid
  assign products_to_display = section.settings.collection.all_products_count

  if section.settings.collection.all_products_count > section.settings.products_to_show
    assign products_to_display = section.settings.products_to_show
    assign more_in_collection = true
  endif

  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and section.settings.products_to_show > columns_mobile_int
    assign show_mobile_slider = true
  endif

  assign show_desktop_slider = false
  if section.settings.products_to_show > section.settings.columns_desktop
    assign show_desktop_slider = true
  endif
-%}

<div
  class="tab-featured-collections color-{{ section.settings.color_scheme }}  isolate gradient"
>
  <div
    class="collection{% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %} section-{{ section.id }}-padding{% if section.settings.full_width %} collection--full-width{% endif %}"
    id="collection-{{ section.id }}"
    data-id="{{ section.id }}"
  >
    <div class="page-width">
      <div class="collection_banner-collection_tab">
        <div class="collection_banner-title">
          <div
            class="collection__title title-wrapper title-wrapper--no-top-margin {% if show_desktop_slider %} collection__title--desktop-slider{% endif %}"
          >
            <div class="tab-collection-img">
              {% if section.settings.bg_image != blank %}
                  <img src="{{ section.settings.bg_image | img_url:'master' }}" width="" height="">
              {% endif %}
           <div class="tab-collection-content">
            {%- if section.settings.title != blank -%}
              <h2 class="title inline-richtext {{ section.settings.heading_size }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                {{ section.settings.title }}
              </h2>
            {%- endif -%}
            {%- if section.settings.description != blank
              or section.settings.show_description
              and section.settings.collection.description != empty
            -%}
              <div class="collection__description {{ section.settings.description_style }} rte{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                {%- if section.settings.show_description -%}
                  {{ section.settings.collection.description }}
                {%- else -%}
                  {{ section.settings.description -}}
                {%- endif %}
              </div>
            {%- endif -%}

            {% if section.settings.button_label != blank %}
              <div class="left collection__view-all{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                <a
                  href="{{ section.settings.button_url}}"
                  class="{% if section.settings.view_all_style == 'link' %}link underlined-link{% elsif section.settings.view_all_style == 'solid' %}button{% else %}button button--secondary{% endif %}"
                  aria-label="{{ 'sections.featured_collection.view_all_label' | t: collection_name: section.settings.collection.title | escape }}"
                >
                  {% comment %}{{ 'sections.featured_collection.view_all' | t }}{% endcomment %}
                  {{ section.settings.button_label }}
                </a>
              </div>
            {% endif %}
              </div>
            </div>
          </div>
        </div>
        <div class="collection-tabs-wrapper">
          <div class="collection-title-header" id="title-header">
            {% for block in section.blocks %}
              {% assign block_count = section.blocks.size %}
              {% if block_count >= 2 %}
                <h2
                  class="collection-title {% if forloop.first %}active{% endif %} h4"

                  data-value="{{ section.id }}-tab-{{ forloop.index }}"
                >
                  {{ block.settings.collection.title }}
                </h2>
              {% endif %}
            {% endfor %}
          </div>
          {% for block in section.blocks %}
            <slider-component
              class="custom-grid tab-content {% if forloop.first %} show-tab{% endif %} slider-mobile-gutter{% if section.settings.full_width %} slider-component-full-width{% endif %}{% if show_mobile_slider == false %} page-width{% endif %}{% if show_desktop_slider == false and section.settings.full_width == false %} page-width-desktop{% endif %}{% if show_desktop_slider %} slider-component-desktop{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              data-value="{{ section.id }}-tab-{{ forloop.index }}"
            >
              <ul
                id="Slider-{{ section.id }}-{{ forloop.index }}"
                data-id="{{ section.id }}"
                class="grid product-grid contains-card contains-card--product{% if settings.card_style == 'standard' %} contains-card--standard{% endif %} grid--{{ section.settings.columns_desktop }}-col-desktop{% if section.settings.collection == blank %} grid--2-col-tablet-down{% else %} grid--{{ section.settings.columns_mobile }}-col-tablet-down{% endif %}{% if show_mobile_slider or show_desktop_slider %} slider{% if show_desktop_slider %} slider--desktop{% endif %}{% if show_mobile_slider %} slider--tablet grid--peek{% endif %}{% endif %}"
                role="list"
                aria-label="{{ 'general.slider.name' | t }}"
              >
                {% assign skip_card_product_styles = false %}

                {%- for product in block.settings.collection.products limit: section.settings.products_to_show -%}
                  <li
                    id="Slide-{{ section.id }}-{{ forloop.index }}"
                    class="grid__item{% if show_mobile_slider or show_desktop_slider %} slider__slide{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                    {% if settings.animations_reveal_on_scroll %}
                      data-cascade
                      style="--animation-order: {{ forloop.index }};"
                    {% endif %}
                  >
                    {% render 'card-product',
                      card_product: product,
                      media_aspect_ratio: section.settings.image_ratio,
                      image_shape: section.settings.image_shape,
                      show_secondary_image: section.settings.show_secondary_image,
                      show_vendor: section.settings.show_vendor,
                      show_rating: section.settings.show_rating,
                      skip_styles: skip_card_product_styles,
                      section_id: section.id,
                      quick_add: section.settings.quick_add
                    %}
                  </li>
                  {%- assign skip_card_product_styles = true -%}
                {%- else -%}
                  {%- for i in (1..section.settings.columns_desktop) -%}
                    <li
                      class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                      {% if settings.animations_reveal_on_scroll %}
                        data-cascade
                        style="--animation-order: {{ forloop.index }};"
                      {% endif %}
                    >
                      {% liquid
                        assign ridx = forloop.rindex
                        case ridx
                          when 5
                            assign ridx = 1
                          when 6
                            assign ridx = 2
                        endcase
                      %}
                      {%- assign placeholder_image = 'product-apparel-' | append: ridx -%}
                      {% render 'card-product',
                        show_vendor: section.settings.show_vendor,
                        media_aspect_ratio: section.settings.image_ratio,
                        image_shape: section.settings.image_shape,
                        placeholder_image: placeholder_image
                      %}
                    </li>
                  {%- endfor -%}
                {%- endfor -%}
              </ul>
      {%- if show_mobile_slider or show_desktop_slider -%}
        <div class="slider-button-data">
        <div class="pagination-horizontal">
         <span class="swiper-pagination-progressbar-fill" style="transform: translate3d(0px, 0px, 0px) scaleX(0.125) scaleY(1); transition-duration: 300ms;"> 
         </span></div>
        <div class="slider-buttons">
          <button
            type="button"
            class="slider-button slider-button--prev cstm-slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">
            <svg width="49" height="14" viewBox="0 0 49 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M47.4863 6.96533H0.972656" stroke="#F77F9E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M6.39449 12.3871L0.972656 6.96529L6.39449 1.54346" stroke="#F77F9E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            </span>
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true"> / </span>
            <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
            <span class="slider-counter--total">{{ products_to_display }}</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next cstm-slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">
               <svg width="48" height="13" viewBox="0 0 48 13" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M1.48633 7.04346H48" stroke="#F77F9E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M42.5782 12.4652L48 7.04341L42.5782 1.62158" stroke="#F77F9E" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </span>
          </button>
        </div>
        </div>
      {%- endif -%}
            </slider-component>
          {% endfor %}
        </div>
      </div>

      {% if section.settings.image_shape == 'arch' %}
        {{ 'mask-arch.svg' | inline_asset_content }}
      {%- endif -%}
    </div>
  </div>
</div>               

{% schema %}
{
  "name": "Tab featured collections",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "image_picker",
      "id": "bg_image",
      "label": "Select Image"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "t:sections.featured-collection.settings.title.default",
      "label": "t:sections.featured-collection.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h3",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "t:sections.featured-collection.settings.description.label"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "t:sections.featured-collection.settings.show_description.label",
      "default": false
    },
    {
      "type": "select",
      "id": "description_style",
      "label": "t:sections.featured-collection.settings.description_style.label",
      "options": [
        {
          "value": "body",
          "label": "t:sections.featured-collection.settings.description_style.options__1.label"
        },
        {
          "value": "subtitle",
          "label": "t:sections.featured-collection.settings.description_style.options__2.label"
        },
        {
          "value": "uppercase",
          "label": "t:sections.featured-collection.settings.description_style.options__3.label"
        }
      ],
      "default": "body"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 25,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.columns_desktop.label"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.featured-collection.settings.full_width.label",
      "default": false
    },
    {
      "type": "text",
      "id": "button_label",
      "default": "Button label",
      "label": "Button label"
    },
    {
      "type": "url",
      "id": "button_url",
      "label": "Button link"
    },
    {
      "type": "select",
      "id": "view_all_style",
      "label": "t:sections.featured-collection.settings.view_all_style.label",
      "options": [
        {
          "value": "link",
          "label": "t:sections.featured-collection.settings.view_all_style.options__1.label"
        },
        {
          "value": "outline",
          "label": "t:sections.featured-collection.settings.view_all_style.options__2.label"
        },
        {
          "value": "solid",
          "label": "t:sections.featured-collection.settings.view_all_style.options__3.label"
        }
      ],
      "default": "solid"
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "t:sections.featured-collection.settings.enable_desktop_slider.label",
      "default": false
    },

    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.featured-collection.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.featured-collection.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.featured-collection.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.featured-collection.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_rating.label",
      "info": "t:sections.featured-collection.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.featured-collection.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": false,
      "label": "t:sections.featured-collection.settings.swipe_on_mobile.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name":"Collection",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label":"Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Tab featured collections",
      "blocks": [
        {
          "type": "collection"
        }
      ]
    }
  ]
}
{% endschema %}
<script>
document.addEventListener('DOMContentLoaded', () => {
  const totalSlidesElement = document.querySelector('.slider-counter--total');
  let currentSlide = 1;
  
  // Function to get total slides dynamically from the content
  const getTotalSlides = () => {
    const totalSlides = parseInt(totalSlidesElement.innerText, 10);
    return totalSlides;
  };

  // Function to update the progress bar
  const updateProgressBar = (progressBar) => {
    const totalSlides = getTotalSlides();
    const progress = currentSlide / totalSlides;
    progressBar.style.transform = `scaleX(${progress})`;
  };

  // Function to enable/disable buttons based on the current slide
  const updateButtonState = (prevButton, nextButton) => {
    const totalSlides = getTotalSlides();
    if (currentSlide === 1) {
      prevButton.setAttribute('disabled', 'true'); // Disable Prev button on the first slide
    } else {
      prevButton.removeAttribute('disabled'); // Enable Prev button
    }

    if (currentSlide === totalSlides) {
      nextButton.setAttribute('disabled', 'true'); // Disable Next button on the last slide
    } else {
      nextButton.removeAttribute('disabled'); // Enable Next button
    }
  };

  // Function to initialize the slider for each tab
  const initializeSliderForTab = (tab) => {
    const progressBar = tab.querySelector('.swiper-pagination-progressbar-fill');
    const nextButton = tab.querySelector('.cstm-slider-button--next');
    const prevButton = tab.querySelector('.cstm-slider-button--prev');
    
    // Reset the slide count to 1 when switching tabs
    currentSlide = 1;
    
    // Update the progress bar and button states for the selected tab
    updateProgressBar(progressBar);
    updateButtonState(prevButton, nextButton);
    
    // Next button click event
    nextButton.addEventListener('click', () => {
      const totalSlides = getTotalSlides();
      if (currentSlide < totalSlides) {
        currentSlide++;
        updateProgressBar(progressBar);
        updateButtonState(prevButton, nextButton); // Update button state after next click
      }
    });

    // Prev button click event
    prevButton.addEventListener('click', () => {
      if (currentSlide > 1) {
        currentSlide--;
        updateProgressBar(progressBar);
        updateButtonState(prevButton, nextButton); // Update button state after prev click
      }
    });
  };

  // Handle tab click events
  document.addEventListener("click", function (event) {
    if (event.target.matches(".collection-title-header .collection-title")) {
      const clickedElement = event.target;

      // Remove the 'active' class from the currently active title
      const activeTitle = clickedElement
        .closest(".collection-title-header")
        .querySelector(".collection-title.active");
      if (activeTitle) {
        activeTitle.classList.remove("active");
      }

      // Add the 'active' class to the clicked title
      clickedElement.classList.add("active");

      // Get the tab ID from the data-value attribute
      const tabId = clickedElement.dataset.value;

      // Hide all tab contents
      const collection = clickedElement.closest(".collection");
      const tabContents = collection.querySelectorAll(".tab-content");
      tabContents.forEach((tabContent) => {
        tabContent.classList.remove("show-tab");
      });

      // Show the relevant tab content
      const targetTabContent = collection.querySelector(`.tab-content[data-value="${tabId}"]`);
      if (targetTabContent) {
        targetTabContent.classList.add("show-tab");
      }

      // Initialize the slider for the selected tab
      initializeSliderForTab(targetTabContent);
    }
  });

  // Initialize the slider for the first tab
  const firstTabContent = document.querySelector('.tab-content.show-tab');
  if (firstTabContent) {
    initializeSliderForTab(firstTabContent);
  }
});
</script>                {% endcomment %}
